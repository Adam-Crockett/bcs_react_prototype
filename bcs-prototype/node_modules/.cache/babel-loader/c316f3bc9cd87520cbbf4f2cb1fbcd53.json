{"ast":null,"code":"/* =========================================================\r\n * Bootstrap year calendar v1.1.0\r\n * Repo: https://github.com/Paul-DS/bootstrap-year-calendar\r\n * =========================================================\r\n * Created by Paul David-Sivelle\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ========================================================= */\n(function ($) {\n  var Calendar = function Calendar(element, options) {\n    this.element = element;\n    this.element.addClass('calendar');\n\n    this._initializeEvents(options);\n\n    this._initializeOptions(options);\n\n    this._render();\n  };\n\n  Calendar.prototype = {\n    constructor: Calendar,\n    _initializeOptions: function _initializeOptions(opt) {\n      if (opt == null) {\n        opt = [];\n      }\n\n      this.options = {\n        startYear: !isNaN(parseInt(opt.startYear)) ? parseInt(opt.startYear) : new Date().getFullYear(),\n        minDate: opt.minDate instanceof Date ? opt.minDate : null,\n        maxDate: opt.maxDate instanceof Date ? opt.maxDate : null,\n        language: opt.language != null && dates[opt.language] != null ? opt.language : 'en',\n        allowOverlap: opt.allowOverlap != null ? opt.allowOverlap : true,\n        displayWeekNumber: opt.displayWeekNumber != null ? opt.displayWeekNumber : false,\n        alwaysHalfDay: opt.alwaysHalfDay != null ? opt.alwaysHalfDay : false,\n        enableRangeSelection: opt.enableRangeSelection != null ? opt.enableRangeSelection : false,\n        disabledDays: opt.disabledDays instanceof Array ? opt.disabledDays : [],\n        roundRangeLimits: opt.roundRangeLimits != null ? opt.roundRangeLimits : false,\n        dataSource: opt.dataSource instanceof Array != null ? opt.dataSource : [],\n        style: opt.style == 'background' || opt.style == 'border' || opt.style == 'custom' ? opt.style : 'border',\n        enableContextMenu: opt.enableContextMenu != null ? opt.enableContextMenu : false,\n        contextMenuItems: opt.contextMenuItems instanceof Array ? opt.contextMenuItems : [],\n        customDayRenderer: $.isFunction(opt.customDayRenderer) ? opt.customDayRenderer : null,\n        customDataSourceRenderer: $.isFunction(opt.customDataSourceRenderer) ? opt.customDataSourceRenderer : null\n      };\n\n      this._initializeDatasourceColors();\n    },\n    _initializeEvents: function _initializeEvents(opt) {\n      if (opt == null) {\n        opt = [];\n      }\n\n      if (opt.renderEnd) {\n        this.element.bind('renderEnd', opt.renderEnd);\n      }\n\n      if (opt.clickDay) {\n        this.element.bind('clickDay', opt.clickDay);\n      }\n\n      if (opt.dayContextMenu) {\n        this.element.bind('dayContextMenu', opt.dayContextMenu);\n      }\n\n      if (opt.selectRange) {\n        this.element.bind('selectRange', opt.selectRange);\n      }\n\n      if (opt.mouseOnDay) {\n        this.element.bind('mouseOnDay', opt.mouseOnDay);\n      }\n\n      if (opt.mouseOutDay) {\n        this.element.bind('mouseOutDay', opt.mouseOutDay);\n      }\n    },\n    _initializeDatasourceColors: function _initializeDatasourceColors() {\n      for (var i in this.options.dataSource) {\n        if (this.options.dataSource[i].color == null) {\n          this.options.dataSource[i].color = colors[i % colors.length];\n        }\n      }\n    },\n    _render: function _render() {\n      this.element.empty();\n\n      this._renderHeader();\n\n      this._renderBody();\n\n      this._renderDataSource();\n\n      this._applyEvents();\n\n      this.element.find('.months-container').fadeIn(500);\n\n      this._triggerEvent('renderEnd', {\n        currentYear: this.options.startYear\n      });\n    },\n    _renderHeader: function _renderHeader() {\n      var header = $(document.createElement('div'));\n      header.addClass('calendar-header panel panel-default');\n      var headerTable = $(document.createElement('table'));\n      var prevDiv = $(document.createElement('th'));\n      prevDiv.addClass('prev');\n\n      if (this.options.minDate != null && this.options.minDate > new Date(this.options.startYear - 1, 11, 31)) {\n        prevDiv.addClass('disabled');\n      }\n\n      var prevIcon = $(document.createElement('span'));\n      prevIcon.addClass('glyphicon glyphicon-chevron-left');\n      prevDiv.append(prevIcon);\n      headerTable.append(prevDiv);\n      var prev2YearDiv = $(document.createElement('th'));\n      prev2YearDiv.addClass('year-title year-neighbor2 hidden-sm hidden-xs');\n      prev2YearDiv.text(this.options.startYear - 2);\n\n      if (this.options.minDate != null && this.options.minDate > new Date(this.options.startYear - 2, 11, 31)) {\n        prev2YearDiv.addClass('disabled');\n      }\n\n      headerTable.append(prev2YearDiv);\n      var prevYearDiv = $(document.createElement('th'));\n      prevYearDiv.addClass('year-title year-neighbor hidden-xs');\n      prevYearDiv.text(this.options.startYear - 1);\n\n      if (this.options.minDate != null && this.options.minDate > new Date(this.options.startYear - 1, 11, 31)) {\n        prevYearDiv.addClass('disabled');\n      }\n\n      headerTable.append(prevYearDiv);\n      var yearDiv = $(document.createElement('th'));\n      yearDiv.addClass('year-title');\n      yearDiv.text(this.options.startYear);\n      headerTable.append(yearDiv);\n      var nextYearDiv = $(document.createElement('th'));\n      nextYearDiv.addClass('year-title year-neighbor hidden-xs');\n      nextYearDiv.text(this.options.startYear + 1);\n\n      if (this.options.maxDate != null && this.options.maxDate < new Date(this.options.startYear + 1, 0, 1)) {\n        nextYearDiv.addClass('disabled');\n      }\n\n      headerTable.append(nextYearDiv);\n      var next2YearDiv = $(document.createElement('th'));\n      next2YearDiv.addClass('year-title year-neighbor2 hidden-sm hidden-xs');\n      next2YearDiv.text(this.options.startYear + 2);\n\n      if (this.options.maxDate != null && this.options.maxDate < new Date(this.options.startYear + 2, 0, 1)) {\n        next2YearDiv.addClass('disabled');\n      }\n\n      headerTable.append(next2YearDiv);\n      var nextDiv = $(document.createElement('th'));\n      nextDiv.addClass('next');\n\n      if (this.options.maxDate != null && this.options.maxDate < new Date(this.options.startYear + 1, 0, 1)) {\n        nextDiv.addClass('disabled');\n      }\n\n      var nextIcon = $(document.createElement('span'));\n      nextIcon.addClass('glyphicon glyphicon-chevron-right');\n      nextDiv.append(nextIcon);\n      headerTable.append(nextDiv);\n      header.append(headerTable);\n      this.element.append(header);\n    },\n    _renderBody: function _renderBody() {\n      var monthsDiv = $(document.createElement('div'));\n      monthsDiv.addClass('months-container');\n\n      for (var m = 0; m < 12; m++) {\n        /* Container */\n        var monthDiv = $(document.createElement('div'));\n        monthDiv.addClass('month-container');\n        monthDiv.data('month-id', m);\n        var firstDate = new Date(this.options.startYear, m, 1);\n        var table = $(document.createElement('table'));\n        table.addClass('month');\n        /* Month header */\n\n        var thead = $(document.createElement('thead'));\n        var titleRow = $(document.createElement('tr'));\n        var titleCell = $(document.createElement('th'));\n        titleCell.addClass('month-title');\n        titleCell.attr('colspan', this.options.displayWeekNumber ? 8 : 7);\n        titleCell.text(dates[this.options.language].months[m]);\n        titleRow.append(titleCell);\n        thead.append(titleRow);\n        var headerRow = $(document.createElement('tr'));\n\n        if (this.options.displayWeekNumber) {\n          var weekNumberCell = $(document.createElement('th'));\n          weekNumberCell.addClass('week-number');\n          weekNumberCell.text(dates[this.options.language].weekShort);\n          headerRow.append(weekNumberCell);\n        }\n\n        var d = dates[this.options.language].weekStart;\n\n        do {\n          var headerCell = $(document.createElement('th'));\n          headerCell.addClass('day-header');\n          headerCell.text(dates[this.options.language].daysMin[d]);\n          headerRow.append(headerCell);\n          d++;\n          if (d >= 7) d = 0;\n        } while (d != dates[this.options.language].weekStart);\n\n        thead.append(headerRow);\n        table.append(thead);\n        /* Days */\n\n        var currentDate = new Date(firstDate.getTime());\n        var lastDate = new Date(this.options.startYear, m + 1, 0);\n        var weekStart = dates[this.options.language].weekStart;\n\n        while (currentDate.getDay() != weekStart) {\n          currentDate.setDate(currentDate.getDate() - 1);\n        }\n\n        while (currentDate <= lastDate) {\n          var row = $(document.createElement('tr'));\n\n          if (this.options.displayWeekNumber) {\n            var weekNumberCell = $(document.createElement('td'));\n            weekNumberCell.addClass('week-number');\n            weekNumberCell.text(this.getWeekNumber(currentDate));\n            row.append(weekNumberCell);\n          }\n\n          do {\n            var cell = $(document.createElement('td'));\n            cell.addClass('day');\n\n            if (currentDate < firstDate) {\n              cell.addClass('old');\n            } else if (currentDate > lastDate) {\n              cell.addClass('new');\n            } else {\n              if (this.options.minDate != null && currentDate < this.options.minDate || this.options.maxDate != null && currentDate > this.options.maxDate) {\n                cell.addClass('disabled');\n              } else if (this.options.disabledDays.length > 0) {\n                for (var d in this.options.disabledDays) {\n                  if (currentDate.getTime() == this.options.disabledDays[d].getTime()) {\n                    cell.addClass('disabled');\n                    break;\n                  }\n                }\n              }\n\n              var cellContent = $(document.createElement('div'));\n              cellContent.addClass('day-content');\n              cellContent.text(currentDate.getDate());\n              cell.append(cellContent);\n\n              if (this.options.customDayRenderer) {\n                this.options.customDayRenderer(cellContent, currentDate);\n              }\n            }\n\n            row.append(cell);\n            currentDate.setDate(currentDate.getDate() + 1);\n          } while (currentDate.getDay() != weekStart);\n\n          table.append(row);\n        }\n\n        monthDiv.append(table);\n        monthsDiv.append(monthDiv);\n      }\n\n      this.element.append(monthsDiv);\n    },\n    _renderDataSource: function _renderDataSource() {\n      var _this = this;\n\n      if (this.options.dataSource != null && this.options.dataSource.length > 0) {\n        this.element.find('.month-container').each(function () {\n          var month = $(this).data('month-id');\n          var firstDate = new Date(_this.options.startYear, month, 1);\n          var lastDate = new Date(_this.options.startYear, month + 1, 0);\n\n          if ((_this.options.minDate == null || lastDate >= _this.options.minDate) && (_this.options.maxDate == null || firstDate <= _this.options.maxDate)) {\n            var monthData = [];\n\n            for (var i in _this.options.dataSource) {\n              if (!(_this.options.dataSource[i].startDate > lastDate) || _this.options.dataSource[i].endDate < firstDate) {\n                monthData.push(_this.options.dataSource[i]);\n              }\n            }\n\n            if (monthData.length > 0) {\n              $(this).find('.day-content').each(function () {\n                var currentDate = new Date(_this.options.startYear, month, $(this).text());\n                var dayData = [];\n\n                if ((_this.options.minDate == null || currentDate >= _this.options.minDate) && (_this.options.maxDate == null || currentDate <= _this.options.maxDate)) {\n                  for (var i in monthData) {\n                    if (monthData[i].startDate <= currentDate && monthData[i].endDate >= currentDate) {\n                      dayData.push(monthData[i]);\n                    }\n                  }\n\n                  if (dayData.length > 0) {\n                    _this._renderDataSourceDay($(this), currentDate, dayData);\n                  }\n                }\n              });\n            }\n          }\n        });\n      }\n    },\n    _renderDataSourceDay: function _renderDataSourceDay(elt, currentDate, events) {\n      switch (this.options.style) {\n        case 'border':\n          var weight = 0;\n\n          if (events.length == 1) {\n            weight = 4;\n          } else if (events.length <= 3) {\n            weight = 2;\n          } else {\n            elt.parent().css('box-shadow', 'inset 0 -4px 0 0 black');\n          }\n\n          if (weight > 0) {\n            var boxShadow = '';\n\n            for (var i in events) {\n              if (boxShadow != '') {\n                boxShadow += \",\";\n              }\n\n              boxShadow += 'inset 0 -' + (parseInt(i) + 1) * weight + 'px 0 0 ' + events[i].color;\n            }\n\n            elt.parent().css('box-shadow', boxShadow);\n          }\n\n          break;\n\n        case 'background':\n          elt.parent().css('background-color', events[events.length - 1].color);\n          var currentTime = currentDate.getTime();\n\n          if (events[events.length - 1].startDate.getTime() == currentTime) {\n            elt.parent().addClass('day-start');\n\n            if (events[events.length - 1].startHalfDay || this.options.alwaysHalfDay) {\n              elt.parent().addClass('day-half'); // Find color for other half\n\n              var otherColor = 'transparent';\n\n              for (var i = events.length - 2; i >= 0; i--) {\n                if (events[i].startDate.getTime() != currentTime || !events[i].startHalfDay && !this.options.alwaysHalfDay) {\n                  otherColor = events[i].color;\n                  break;\n                }\n              }\n\n              elt.parent().css('background', 'linear-gradient(-45deg, ' + events[events.length - 1].color + ', ' + events[events.length - 1].color + ' 49%, ' + otherColor + ' 51%, ' + otherColor + ')');\n            } else if (this.options.roundRangeLimits) {\n              elt.parent().addClass('round-left');\n            }\n          } else if (events[events.length - 1].endDate.getTime() == currentTime) {\n            elt.parent().addClass('day-end');\n\n            if (events[events.length - 1].endHalfDay || this.options.alwaysHalfDay) {\n              elt.parent().addClass('day-half'); // Find color for other half\n\n              var otherColor = 'transparent';\n\n              for (var i = events.length - 2; i >= 0; i--) {\n                if (events[i].endDate.getTime() != currentTime || !events[i].endHalfDay && !this.options.alwaysHalfDay) {\n                  otherColor = events[i].color;\n                  break;\n                }\n              }\n\n              elt.parent().css('background', 'linear-gradient(135deg, ' + events[events.length - 1].color + ', ' + events[events.length - 1].color + ' 49%, ' + otherColor + ' 51%, ' + otherColor + ')');\n            } else if (this.options.roundRangeLimits) {\n              elt.parent().addClass('round-right');\n            }\n          }\n\n          break;\n\n        case 'custom':\n          if (this.options.customDataSourceRenderer) {\n            this.options.customDataSourceRenderer.call(this, elt, currentDate, events);\n          }\n\n          break;\n      }\n    },\n    _applyEvents: function _applyEvents() {\n      var _this = this;\n      /* Header buttons */\n\n\n      this.element.find('.year-neighbor, .year-neighbor2').click(function () {\n        if (!$(this).hasClass('disabled')) {\n          _this.setYear(parseInt($(this).text()));\n        }\n      });\n      this.element.find('.calendar-header .prev').click(function () {\n        if (!$(this).hasClass('disabled')) {\n          _this.element.find('.months-container').animate({\n            'margin-left': '100%'\n          }, 100, function () {\n            _this.element.find('.months-container').css('visibility', 'hidden');\n\n            _this.element.find('.months-container').css('margin-left', '0');\n\n            setTimeout(function () {\n              _this.setYear(_this.options.startYear - 1);\n            }, 50);\n          });\n        }\n      });\n      this.element.find('.calendar-header .next').click(function () {\n        if (!$(this).hasClass('disabled')) {\n          _this.element.find('.months-container').animate({\n            'margin-left': '-100%'\n          }, 100, function () {\n            _this.element.find('.months-container').css('visibility', 'hidden');\n\n            _this.element.find('.months-container').css('margin-left', '0');\n\n            setTimeout(function () {\n              _this.setYear(_this.options.startYear + 1);\n            }, 50);\n          });\n        }\n      });\n      var cells = this.element.find('.day:not(.old, .new, .disabled)');\n      /* Click on date */\n\n      cells.click(function (e) {\n        e.stopPropagation();\n\n        var date = _this._getDate($(this));\n\n        _this._triggerEvent('clickDay', {\n          element: $(this),\n          which: e.which,\n          date: date,\n          events: _this.getEvents(date)\n        });\n      });\n      /* Click right on date */\n\n      cells.bind('contextmenu', function (e) {\n        if (_this.options.enableContextMenu) {\n          e.preventDefault();\n\n          if (_this.options.contextMenuItems.length > 0) {\n            _this._openContextMenu($(this));\n          }\n        }\n\n        var date = _this._getDate($(this));\n\n        _this._triggerEvent('dayContextMenu', {\n          element: $(this),\n          date: date,\n          events: _this.getEvents(date)\n        });\n      });\n      /* Range selection */\n\n      if (this.options.enableRangeSelection) {\n        cells.mousedown(function (e) {\n          if (e.which == 1) {\n            var currentDate = _this._getDate($(this));\n\n            if (_this.options.allowOverlap || _this.getEvents(currentDate).length == 0) {\n              _this._mouseDown = true;\n              _this._rangeStart = _this._rangeEnd = currentDate;\n\n              _this._refreshRange();\n            }\n          }\n        });\n        cells.mouseenter(function (e) {\n          if (_this._mouseDown) {\n            var currentDate = _this._getDate($(this));\n\n            if (!_this.options.allowOverlap) {\n              var newDate = new Date(_this._rangeStart.getTime());\n\n              if (newDate < currentDate) {\n                var nextDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + 1);\n\n                while (newDate < currentDate) {\n                  if (_this.getEvents(nextDate).length > 0) {\n                    break;\n                  }\n\n                  newDate.setDate(newDate.getDate() + 1);\n                  nextDate.setDate(nextDate.getDate() + 1);\n                }\n              } else {\n                var nextDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() - 1);\n\n                while (newDate > currentDate) {\n                  if (_this.getEvents(nextDate).length > 0) {\n                    break;\n                  }\n\n                  newDate.setDate(newDate.getDate() - 1);\n                  nextDate.setDate(nextDate.getDate() - 1);\n                }\n              }\n\n              currentDate = newDate;\n            }\n\n            var oldValue = _this._rangeEnd;\n            _this._rangeEnd = currentDate;\n\n            if (oldValue.getTime() != _this._rangeEnd.getTime()) {\n              _this._refreshRange();\n            }\n          }\n        });\n        $(window).mouseup(function (e) {\n          if (_this._mouseDown) {\n            _this._mouseDown = false;\n\n            _this._refreshRange();\n\n            var minDate = _this._rangeStart < _this._rangeEnd ? _this._rangeStart : _this._rangeEnd;\n            var maxDate = _this._rangeEnd > _this._rangeStart ? _this._rangeEnd : _this._rangeStart;\n\n            _this._triggerEvent('selectRange', {\n              startDate: minDate,\n              endDate: maxDate\n            });\n          }\n        });\n      }\n      /* Hover date */\n\n\n      cells.mouseenter(function (e) {\n        if (!_this._mouseDown) {\n          var date = _this._getDate($(this));\n\n          _this._triggerEvent('mouseOnDay', {\n            element: $(this),\n            date: date,\n            events: _this.getEvents(date)\n          });\n        }\n      });\n      cells.mouseleave(function (e) {\n        var date = _this._getDate($(this));\n\n        _this._triggerEvent('mouseOutDay', {\n          element: $(this),\n          date: date,\n          events: _this.getEvents(date)\n        });\n      });\n      /* Responsive management */\n\n      setInterval(function () {\n        var calendarSize = $(_this.element).width();\n        var monthSize = $(_this.element).find('.month').first().width() + 10;\n        var monthContainerClass = 'month-container';\n\n        if (monthSize * 6 < calendarSize) {\n          monthContainerClass += ' col-xs-2';\n        } else if (monthSize * 4 < calendarSize) {\n          monthContainerClass += ' col-xs-3';\n        } else if (monthSize * 3 < calendarSize) {\n          monthContainerClass += ' col-xs-4';\n        } else if (monthSize * 2 < calendarSize) {\n          monthContainerClass += ' col-xs-6';\n        } else {\n          monthContainerClass += ' col-xs-12';\n        }\n\n        $(_this.element).find('.month-container').attr('class', monthContainerClass);\n      }, 300);\n    },\n    _refreshRange: function _refreshRange() {\n      var _this = this;\n\n      this.element.find('td.day.range').removeClass('range');\n      this.element.find('td.day.range-start').removeClass('range-start');\n      this.element.find('td.day.range-end').removeClass('range-end');\n\n      if (this._mouseDown) {\n        var beforeRange = true;\n        var afterRange = false;\n        var minDate = _this._rangeStart < _this._rangeEnd ? _this._rangeStart : _this._rangeEnd;\n        var maxDate = _this._rangeEnd > _this._rangeStart ? _this._rangeEnd : _this._rangeStart;\n        this.element.find('.month-container').each(function () {\n          var monthId = $(this).data('month-id');\n\n          if (minDate.getMonth() <= monthId && maxDate.getMonth() >= monthId) {\n            $(this).find('td.day:not(.old, .new)').each(function () {\n              var date = _this._getDate($(this));\n\n              if (date >= minDate && date <= maxDate) {\n                $(this).addClass('range');\n\n                if (date.getTime() == minDate.getTime()) {\n                  $(this).addClass('range-start');\n                }\n\n                if (date.getTime() == maxDate.getTime()) {\n                  $(this).addClass('range-end');\n                }\n              }\n            });\n          }\n        });\n      }\n    },\n    _openContextMenu: function _openContextMenu(elt) {\n      var contextMenu = $('.calendar-context-menu');\n\n      if (contextMenu.length > 0) {\n        contextMenu.hide();\n        contextMenu.empty();\n      } else {\n        contextMenu = $(document.createElement('div'));\n        contextMenu.addClass('calendar-context-menu');\n        $('body').append(contextMenu);\n      }\n\n      var date = this._getDate(elt);\n\n      var events = this.getEvents(date);\n\n      for (var i in events) {\n        var eventItem = $(document.createElement('div'));\n        eventItem.addClass('item');\n        eventItem.css('border-left', '4px solid ' + events[i].color);\n        var eventItemContent = $(document.createElement('div'));\n        eventItemContent.addClass('content');\n        eventItemContent.text(events[i].name);\n        eventItem.append(eventItemContent);\n        var icon = $(document.createElement('span'));\n        icon.addClass('glyphicon glyphicon-chevron-right');\n        eventItem.append(icon);\n\n        this._renderContextMenuItems(eventItem, this.options.contextMenuItems, events[i]);\n\n        contextMenu.append(eventItem);\n      }\n\n      if (contextMenu.children().length > 0) {\n        contextMenu.css('left', elt.offset().left + 25 + 'px');\n        contextMenu.css('top', elt.offset().top + 25 + 'px');\n        contextMenu.show();\n        $(window).one('mouseup', function () {\n          contextMenu.hide();\n        });\n      }\n    },\n    _renderContextMenuItems: function _renderContextMenuItems(parent, items, evt) {\n      var subMenu = $(document.createElement('div'));\n      subMenu.addClass('submenu');\n\n      for (var i in items) {\n        if (!items[i].visible || items[i].visible(evt)) {\n          var menuItem = $(document.createElement('div'));\n          menuItem.addClass('item');\n          var menuItemContent = $(document.createElement('div'));\n          menuItemContent.addClass('content');\n          menuItemContent.text(items[i].text);\n          menuItem.append(menuItemContent);\n\n          if (items[i].click) {\n            (function (index) {\n              menuItem.click(function () {\n                items[index].click(evt);\n              });\n            })(i);\n          }\n\n          var icon = $(document.createElement('span'));\n          icon.addClass('glyphicon glyphicon-chevron-right');\n          menuItem.append(icon);\n\n          if (items[i].items && items[i].items.length > 0) {\n            this._renderContextMenuItems(menuItem, items[i].items, evt);\n          }\n\n          subMenu.append(menuItem);\n        }\n      }\n\n      if (subMenu.children().length > 0) {\n        parent.append(subMenu);\n      }\n    },\n    _getColor: function _getColor(colorString) {\n      var div = $('<div />');\n      div.css('color', colorString);\n    },\n    _getDate: function _getDate(elt) {\n      var day = elt.children('.day-content').text();\n      var month = elt.closest('.month-container').data('month-id');\n      var year = this.options.startYear;\n      return new Date(year, month, day);\n    },\n    _triggerEvent: function _triggerEvent(eventName, parameters) {\n      var event = $.Event(eventName);\n\n      for (var i in parameters) {\n        event[i] = parameters[i];\n      }\n\n      this.element.trigger(event);\n    },\n    getWeekNumber: function getWeekNumber(date) {\n      var tempDate = new Date(date.getTime());\n      tempDate.setHours(0, 0, 0, 0);\n      tempDate.setDate(tempDate.getDate() + 3 - (tempDate.getDay() + 6) % 7);\n      var week1 = new Date(tempDate.getFullYear(), 0, 4);\n      return 1 + Math.round(((tempDate.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n    },\n    getEvents: function getEvents(date) {\n      var events = [];\n\n      if (this.options.dataSource && date) {\n        for (var i in this.options.dataSource) {\n          if (this.options.dataSource[i].startDate <= date && this.options.dataSource[i].endDate >= date) {\n            events.push(this.options.dataSource[i]);\n          }\n        }\n      }\n\n      return events;\n    },\n    getYear: function getYear() {\n      return this.options.startYear;\n    },\n    setYear: function setYear(year) {\n      var parsedYear = parseInt(year);\n\n      if (!isNaN(parsedYear)) {\n        this.options.startYear = parsedYear;\n\n        this._render();\n      }\n    },\n    getMinDate: function getMinDate() {\n      return this.options.minDate;\n    },\n    setMinDate: function setMinDate(date) {\n      if (date instanceof Date) {\n        this.options.minDate = date;\n\n        this._render();\n      }\n    },\n    getMaxDate: function getMaxDate() {\n      return this.options.maxDate;\n    },\n    setMaxDate: function setMaxDate(date) {\n      if (date instanceof Date) {\n        this.options.maxDate = date;\n\n        this._render();\n      }\n    },\n    getStyle: function getStyle() {\n      return this.options.style;\n    },\n    setStyle: function setStyle(style) {\n      this.options.style = style == 'background' || style == 'border' || style == 'custom' ? style : 'border';\n\n      this._render();\n    },\n    getAllowOverlap: function getAllowOverlap() {\n      return this.options.allowOverlap;\n    },\n    setAllowOverlap: function setAllowOverlap(allowOverlap) {\n      this.options.allowOverlap = allowOverlap;\n    },\n    getDisplayWeekNumber: function getDisplayWeekNumber() {\n      return this.options.displayWeekNumber;\n    },\n    setDisplayWeekNumber: function setDisplayWeekNumber(displayWeekNumber) {\n      this.options.displayWeekNumber = displayWeekNumber;\n\n      this._render();\n    },\n    getAlwaysHalfDay: function getAlwaysHalfDay() {\n      return this.options.alwaysHalfDay;\n    },\n    setAlwaysHalfDay: function setAlwaysHalfDay(alwaysHalfDay) {\n      this.options.alwaysHalfDay = alwaysHalfDay;\n\n      this._render();\n    },\n    getEnableRangeSelection: function getEnableRangeSelection() {\n      return this.options.enableRangeSelection;\n    },\n    setEnableRangeSelection: function setEnableRangeSelection(enableRangeSelection) {\n      this.options.enableRangeSelection = enableRangeSelection;\n\n      this._render();\n    },\n    getDisabledDays: function getDisabledDays() {\n      return this.options.disabledDays;\n    },\n    setDisabledDays: function setDisabledDays(disabledDays) {\n      this.options.disabledDays = disabledDays instanceof Array ? disabledDays : [];\n\n      this._render();\n    },\n    getRoundRangeLimits: function getRoundRangeLimits() {\n      return this.options.roundRangeLimits;\n    },\n    setRoundRangeLimits: function setRoundRangeLimits(roundRangeLimits) {\n      this.options.roundRangeLimits = roundRangeLimits;\n\n      this._render();\n    },\n    getEnableContextMenu: function getEnableContextMenu() {\n      return this.options.enableContextMenu;\n    },\n    setEnableContextMenu: function setEnableContextMenu(enableContextMenu) {\n      this.options.enableContextMenu = enableContextMenu;\n\n      this._render();\n    },\n    getContextMenuItems: function getContextMenuItems() {\n      return this.options.contextMenuItems;\n    },\n    setContextMenuItems: function setContextMenuItems(contextMenuItems) {\n      this.options.contextMenuItems = contextMenuItems instanceof Array ? contextMenuItems : [];\n\n      this._render();\n    },\n    getCustomDayRenderer: function getCustomDayRenderer() {\n      return this.options.customDayRenderer;\n    },\n    setCustomDayRenderer: function setCustomDayRenderer(customDayRenderer) {\n      this.options.customDayRenderer = $.isFunction(customDayRenderer) ? customDayRenderer : null;\n\n      this._render();\n    },\n    getCustomDataSourceRenderer: function getCustomDataSourceRenderer() {\n      return this.options.customDataSourceRenderer;\n    },\n    setCustomDataSourceRenderer: function setCustomDataSourceRenderer(customDataSourceRenderer) {\n      this.options.customDataSourceRenderer = $.isFunction(customDataSourceRenderer) ? customDataSourceRenderer : null;\n\n      this._render();\n    },\n    getLanguage: function getLanguage() {\n      return this.options.language;\n    },\n    setLanguage: function setLanguage(language) {\n      if (language != null && dates[language] != null) {\n        this.options.language = language;\n\n        this._render();\n      }\n    },\n    getDataSource: function getDataSource() {\n      return this.options.dataSource;\n    },\n    setDataSource: function setDataSource(dataSource) {\n      this.options.dataSource = dataSource instanceof Array ? dataSource : [];\n\n      this._initializeDatasourceColors();\n\n      this._render();\n    },\n    addEvent: function addEvent(evt) {\n      this.options.dataSource.push(evt);\n\n      this._render();\n    }\n  };\n\n  $.fn.calendar = function (options) {\n    var calendar = new Calendar($(this), options);\n    $(this).data('calendar', calendar);\n    return calendar;\n  };\n  /* Events binding management */\n\n\n  $.fn.renderEnd = function (fct) {\n    $(this).bind('renderEnd', fct);\n  };\n\n  $.fn.clickDay = function (fct) {\n    $(this).bind('clickDay', fct);\n  };\n\n  $.fn.dayContextMenu = function (fct) {\n    $(this).bind('dayContextMenu', fct);\n  };\n\n  $.fn.selectRange = function (fct) {\n    $(this).bind('selectRange', fct);\n  };\n\n  $.fn.mouseOnDay = function (fct) {\n    $(this).bind('mouseOnDay', fct);\n  };\n\n  $.fn.mouseOutDay = function (fct) {\n    $(this).bind('mouseOutDay', fct);\n  };\n\n  var dates = $.fn.calendar.dates = {\n    en: {\n      days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n      daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n      daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\n      months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      weekShort: 'W',\n      weekStart: 0\n    }\n  };\n  var colors = $.fn.calendar.colors = ['#2C8FC9', '#9CB703', '#F5BB00', '#FF4A32', '#B56CE2', '#45A597'];\n  $(function () {\n    $('[data-provide=\"calendar\"]').each(function () {\n      $(this).calendar();\n    });\n  });\n})(window.jQuery);","map":null,"metadata":{},"sourceType":"script"}